{"version":3,"sources":["webpack:///webpack/bootstrap c816cdb33af505f89388","webpack:///./lib/dr_mario.js","webpack:///./lib/game.js","webpack:///./lib/block.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;;;;;;AChBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,oBAAmB,QAAQ;AAC3B;AACA,qBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAoC,IAAI;AACxC;;AAEA,qCAAoC,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAoC,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAoC,IAAI;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,qCAAoC,IAAI;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAmB,QAAQ;AAC3B,sBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC1TA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c816cdb33af505f89388","const Game = require(\"./game\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const canvas = document.getElementsByTagName('canvas')[0];\n  const ctx = canvas.getContext(\"2d\");\n\n  canvas.width = Game.WIDTH;\n  canvas.height = Game.HEIGHT;\n  new Game(ctx);\n});\n\n// recreate board using grid system\n// write horizontal fall and veritcal fall\n// write rotate\n// write method to check if pill should continue moving\n// check for 4 of a kind\n// resume falling\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dr_mario.js\n// module id = 0\n// module chunks = 0","const Block = require(\"./block\");\n\nconst COLORS = [0, 59, 240];\n\nfunction randomColor() {\n  let rand = Math.random();\n  rand *= 3;\n  rand = Math.floor(rand);\n  return COLORS[rand];\n}\n\nfunction randomCoordinates() {\n  const coord = [];\n  while (coord.length < 10) {\n    let yRand = Math.random();\n    let xRand = Math.random();\n    yRand *= 10;\n    xRand *= 10;\n    yRand = Math.floor(yRand);\n    xRand = Math.floor(xRand);\n    coord.push([yRand, xRand]);\n  }\n\n  return coord;\n}\n\nclass Game {\n  constructor(ctx) {\n    this.ctx = ctx;\n    let timer;\n    this.timer = timer;\n    this.grid = this.createGrid();\n\n    this.currentPill = {\n      xPos: 4,\n      yPos: 19,\n      orientation: \"horizontal1\",\n      color1: COLORS[1],\n      color2: COLORS[2]\n    };\n    this.orphans = [];\n\n    this.bindKeyHandlers();\n    this.drawPill(this.currentPill.xPos, this.currentPill.yPos, this.currentPill.orientation,\n      this.currentPill.color1, this.currentPill.color2);\n    this.drawGrid();\n\n\n    clearInterval(this.timer);\n    this.timer = setInterval( () => this.tick(), 1000);\n  }\n\n  bindKeyHandlers() {\n    const currentPill = this.currentPill;\n\n    Game.MOVES.forEach(move => {\n      key(move, this.handleMove.bind(this));\n    });\n  }\n\n  createGrid() {\n    const grid = new Array(20);\n    for (let i = 0; i < 20; i++) {\n      grid[i] = new Array(10);\n      for(let j = 0; j < 10; j++) {\n        grid[i][j] = new Block(j, i);\n      }\n    }\n\n    let virusCoord = randomCoordinates();\n    virusCoord.forEach( coord => {\n      grid[coord[0]][coord[1]].virus = true;\n      grid[coord[0]][coord[1]].color = randomColor();\n    });\n\n    return grid;\n  }\n\n  tick() {\n    this.drawPill(this.currentPill.xPos, this.currentPill.yPos, this.currentPill.orientation,\n      -1, -1);\n\n    let yPos2 = this.currentPill.yPos - 1;\n    if (this.drawPill(this.currentPill.xPos, yPos2, this.currentPill.orientation,\n      \"test\", \"test\")) {\n        this.currentPill.yPos -= 1;\n    } else {\n      this.drawPill(this.currentPill.xPos, this.currentPill.yPos, this.currentPill.orientation,\n        this.currentPill.color1, this.currentPill.color2);\n\n        this.checkLines();\n\n        let newXPos = 4;\n        let newYPos = 19;\n        let orientation2 = 'horizontal1';\n        let color1 = COLORS[1];\n        let color2 = COLORS[2];\n\n        if (this.drawPill(newXPos, newYPos, orientation2, \"test\", \"test\")) {\n          this.currentPill.xPos = newXPos;\n          this.currentPill.yPos = newYPos;\n          this.currentPill.orientation = orientation2;\n          this.currentPill.color1 = color1;\n          this.currentPill.color2 = color2;\n        } else {\n          alert(\"Game Over\");\n          clearInterval(this.timer);\n          return;\n        }\n    }\n\n    this.drawPill(this.currentPill.xPos, this.currentPill.yPos, this.currentPill.orientation,\n      this.currentPill.color1, this.currentPill.color2);\n\n    this.drawGrid();\n  }\n\n  checkLines() {\n\n  }\n\n  handleMove(move) {\n    if (move.key === 'a' || move.key === 'ArrowLeft') {\n      this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n        this.currentPill.orientation, -1, -1);\n      let xPos2 = this.currentPill.xPos - 1;\n      if (this.drawPill(xPos2, this.currentPill.yPos, this.currentPill.orientation,\n        'test', 'test')) {\n          this.currentPill.xPos -= 1;\n      }\n\n    } else if (move.key === 'w' || move.key === 'ArrowUp') {\n\n      if (this.currentPill.orientation === 'horizontal1') {\n        this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n          this.currentPill.orientation, -1, -1);\n        if (this.drawPill(this.currentPill.xPos, this.currentPill.yPos, 'vertical1',\n          'test', 'test')) {\n            this.currentPill.orientation = 'vertical1';\n        }\n\n      } else if (this.currentPill.orientation === 'vertical1') {\n        this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n          this.currentPill.orientation, -1, -1);\n        if (this.drawPill(this.currentPill.xPos, this.currentPill.yPos, 'horizontal2',\n          'test', 'test')) {\n            this.currentPill.orientation = 'horizontal2';\n        }\n\n      } else if (this.currentPill.orientation === 'horizontal2') {\n        this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n          this.currentPill.orientation, -1, -1);\n        if (this.drawPill(this.currentPill.xPos, this.currentPill.yPos, 'vertical2',\n          'test', 'test')) {\n            this.currentPill.orientation = 'vertical2';\n        }\n\n      } else if (this.currentPill.orientation === 'vertical2') {\n        this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n          this.currentPill.orientation, -1, -1);\n        if (this.drawPill(this.currentPill.xPos, this.currentPill.yPos, 'horizontal1',\n          'test', 'test')) {\n            this.currentPill.orientation = 'horizontal1';\n        }\n      }\n\n    } else if (move.key === 'd' || move.key === 'ArrowRight') {\n      this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n        this.currentPill.orientation, -1, -1);\n        let xPos2 = this.currentPill.xPos + 1;\n        if (this.drawPill(xPos2, this.currentPill.yPos, this.currentPill.orientation,\n          'test', 'test')) {\n            this.currentPill.xPos += 1;\n        }\n    } else if (move.key === 's' || move.key === 'ArrowDown') {\n      this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n        this.currentPill.orientation, -1, -1);\n        let yPos2 = this.currentPill.yPos - 1;\n        if (this.drawPill(this.currentPill.xPos, yPos2, this.currentPill.orientation,\n          'test', 'test')) {\n            this.currentPill.yPos -= 1;\n        }\n    }\n\n    this.drawPill(this.currentPill.xPos, this.currentPill.yPos,\n      this.currentPill.orientation, this.currentPill.color1,\n      this.currentPill.color2);\n\n    this.drawGrid();\n  }\n\n  drawBlock(xPos, yPos, hue, virus = false) {\n    let pixelX = xPos * 20;\n    let pixelY = (19 - yPos) * 20;\n    if (hue !== -1) {\n      if (virus === false) {\n        this.ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;\n        this.ctx.fillRect(pixelX + 2, pixelY + 2, 16, 16);\n\n        this.ctx.fillStyle = `hsl(${hue}, 100%, 70%)`;\n        this.ctx.beginPath();\n        this.ctx.moveTo(pixelX, pixelY);\n        this.ctx.lineTo(pixelX + 20, pixelY);\n        this.ctx.lineTo(pixelX + 18, pixelY + 2);\n        this.ctx.lineTo(pixelX + 2, pixelY + 2);\n        this.ctx.fill();\n\n        this.ctx.fillStyle = `hsl(${hue}, 100%, 40%)`;\n        this.ctx.beginPath();\n        this.ctx.moveTo(pixelX, pixelY);\n        this.ctx.lineTo(pixelX, pixelY + 20);\n        this.ctx.lineTo(pixelX + 2, pixelY + 18);\n        this.ctx.lineTo(pixelX + 2, pixelY + 2);\n        this.ctx.fill();\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(pixelX + 20, pixelY);\n        this.ctx.lineTo(pixelX + 20, pixelY + 20);\n        this.ctx.lineTo(pixelX + 18, pixelY + 18);\n        this.ctx.lineTo(pixelX + 18, pixelY + 2);\n        this.ctx.fill();\n\n        this.ctx.fillStyle = `hsl(${hue}, 100%, 30%)`;\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(pixelX, pixelY + 20);\n        this.ctx.lineTo(pixelX + 20, pixelY + 20);\n        this.ctx.lineTo(pixelX + 18, pixelY + 18);\n        this.ctx.lineTo(pixelX + 2, pixelY + 18);\n        this.ctx.fill();\n      } else if (virus === true) {\n        this.ctx.fillStyle = `hsl(${hue}, 100%, 40%)`;\n        this.ctx.beginPath();\n        this.ctx.arc(pixelX + 10, pixelY + 10, 9, 0, 2*Math.PI);\n        this.ctx.fill();\n\n        // Draw the left eye\n        this.ctx.fillStyle = 'black';\n        this.ctx.beginPath();\n        this.ctx.arc(pixelX + 5, pixelY + 7, 1.5, 0, 2*Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n\n        // Draw the right eye\n        this.ctx.beginPath();\n        this.ctx.arc(pixelX + 15, pixelY + 7, 1.5, 0, 2*Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n\n        // Draw the mouth\n        this.ctx.beginPath();\n        this.ctx.arc(pixelX + 10, pixelY + 14, 3, 0, Math.PI, true);\n        this.ctx.closePath();\n        this.ctx.fill();\n      }\n    }\n  }\n\n\n  drawPill(xPos, yPos, orientation, color1 = randomColor(), color2 = randomColor()) {\n    let valid = true;\n\n    if (orientation === 'horizontal1') {\n      valid = valid && this.setGrid(xPos, yPos, color1);\n      valid = valid && this.setGrid(xPos - 1, yPos, color2);\n    } else if (orientation === 'vertical1') {\n      valid = valid && this.setGrid(xPos, yPos, color1);\n      valid = valid && this.setGrid(xPos, yPos + 1, color2);\n    } else if (orientation === 'horizontal2') {\n      valid = valid && this.setGrid(xPos, yPos, color2);\n      valid = valid && this.setGrid(xPos - 1, yPos, color1);\n    } else if (orientation === 'vertical2') {\n      valid = valid && this.setGrid(xPos, yPos, color2);\n      valid = valid && this.setGrid(xPos, yPos + 1, color1);\n    }\n\n    return valid;\n  }\n\n  drawGrid() {\n    this.ctx.clearRect(0, 0, 200, 400);\n\n    for (let i = 0; i < 20; i++) {\n      for (let j = 0; j < 10; j++) {\n        this.drawBlock(j, i, this.grid[i][j].color, this.grid[i][j].virus);\n      }\n    }\n  }\n\n  setGrid(x, y, color) {\n    if (x >= 0 && x < 10 && y >= 0 && y < 20) {\n      if(color === \"test\") return this.grid[y][x].color === -1;\n\n      this.grid[y][x].color = color;\n      return true;\n    }\n    return false;\n  }\n\n}\n\nGame.WIDTH = 200;\nGame.HEIGHT = 400;\nGame.MOVES = [\n  'w',\n  'a',\n  's',\n  'd',\n  'up',\n  'left',\n  'right',\n  'down'\n];\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","class Block {\n  constructor(xPos, yPos) {\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.color = -1;\n    this.virus = false;\n  }\n\n}\n\nmodule.exports = Block;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/block.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}